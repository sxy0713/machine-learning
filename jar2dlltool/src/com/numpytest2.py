'''
Created on 2019年1月31日

@author: ShenJun
'''
import numpy as np

if __name__ == '__main__':
    #===========================================================================
    # numpy.frombuffer
    # 此函数将缓冲区解释为一维数组。 暴露缓冲区接口的任何对象都用作参数来返回ndarray。
    #===========================================================================
#     s = 'Hello World' 
#     a = np.frombuffer(s, dtype = 'S1')  
#     print (a)

    #===========================================================================
    # numpy.fromiter
    # 此函数从任何可迭代对象构建一个ndarray对象，返回一个新的一维数组。
    #===========================================================================
    # 从列表中获得迭代器  
    
    list1 = range(5) 
    it = iter(list1)  
    # 使用迭代器创建 ndarray 
    x = np.fromiter(it, dtype =  float)  
    print (x)
    
    
    #===========================================================================
    # NumPy - 来自数值范围的数组
    #===========================================================================
    
    #===============================================================================
    #     numpy.arange
    # 这个函数返回ndarray对象，包含给定范围内的等间隔值。
    #===============================================================================
    x = np.arange(10,20,2)  
    print (x)
    
    #===============================================================================
    #     numpy.linspace
    # 此函数类似于arange()函数。 在此函数中，指定了范围之间的均匀间隔数量，而不是步长。
    #===============================================================================
    x = np.linspace(10,20,5)  
    print (x)
    
    # 将 endpoint 设为 false
    x = np.linspace(10,20,5, endpoint = False)  
    print (x)

    # 输出 retstep 值
    x = np.linspace(1,2,5, retstep = True)  
    print (x)           
    # 这里的 retstep 为 0.25
    
    #===============================================================================
    #     numpy.logspace
    # 此函数返回一个ndarray对象，其中包含在对数刻度上均匀分布的数字。 刻度的开始和结束端点是某个底数的幂，通常为 10。
    #===============================================================================
    # 默认底数是 10
    a = np.logspace(1.0, 2.0, num = 10)  
    print (a)
    # 将对数空间的底数设置为 2
    a = np.logspace(1, 10, num = 10, base = 2)  
    print (a)

    #--------------------------------------------------------- NumPy - 切片和索引
    #------------------------------ ndarray对象的内容可以通过索引或切片来访问和修改，就像 Python 的内置容器对象一样。
    #------------------------------------------------------------------------------ 
    #--------------------- 如前所述，ndarray对象中的元素遵循基于零的索引。 有三种可用的索引方法类型： 字段访问，基本切片和高级索引。
    a = np.arange(10)
    s = slice(2,7,2)  
    print (a[s])
    
    #a = np.arange(10)
    b = a[2:7:2]
    print(b)
    
    # 对单个元素进行切片 
    b = a[5]  
    print (b)
    
    # 对始于索引的元素进行切片  
    print(a[2:])
    
    # 对索引之间的元素进行切片 
    print(a)
    print('对索引之间的元素进行切片 ')
    print(a[2:5])
    
    # 多维ndarray
    a = np.array([[1,2,3],[3,4,5],[4,5,6]])  
    #print (a)
    # 对始于索引的元素进行切片      
    print  ('现在我们从索引 a[1:] 开始对数组切片')  
    print (a[1:])

    # 这会返回第二列元素的数组：  
    print ('第二列的元素是：') 
    print (a[...,1])  
    # 第二行切片所有元素：
    print  ('第二行的元素是：')  
    print (a[1,...]) 
    print  ('第二列及其剩余元素是：')  
    print (a[...,1:])
    
    #===============================================================================
    #     NumPy - 高级索引
    # 如果一个ndarray是非元组序列，数据类型为整数或布尔值的ndarray，或者至少一个元素为序列对象的元组，我们就能够用它来索引ndarray。高级索引始终返回数据的副本。 与此相反，切片只提供了一个视图。
    # 
    # 有两种类型的高级索引：整数和布尔值。
    #===============================================================================
    
    #===========================================================================
    # 整数索引
    #===========================================================================
    # 以下示例获取了ndarray对象中每一行指定列的一个元素。 因此，行索引包含所有行号，列索引指定要选择的元素。
    x = np.array([[1,  2],  [3,  4],  [5,  6]]) 
    y = x[[0,1,2],  [0,1,0]]  
    print (y)
    
    # 获取了 4X3 数组中的每个角处的元素
    x = np.array([[0,  1,  2],[3,  4,  5],[6,  7,  8],[9,  10,  11]])  
    print  ('我们的数组是：')  
    print (x) 
    print  ('\n') 
    rows = np.array([[0,0],[3,3]]) 
    cols = np.array([[0,2],[0,2]]) 
    y = x[rows,cols]  
    print ('这个数组的每个角处的元素是：')  
    print (y)

    # 高级和基本索引可以通过使用切片:或省略号...与索引数组组合。 
    # 但高级索引会导致复制，并且可能有不同的内存布局。
    x = np.array([[0,  1,  2],[3,  4,  5],[6,  7,  8],[9,  10,  11]])  
    print  ('我们的数组是：')  
    print (x) 
    print  ('\n')  
    # 切片
    z = x[1:4,1:3]  
    print  ('切片之后，我们的数组变为：')  
    print (z) 
    print  ('\n')  
    # 对列使用高级索引 
    y = x[1:4,[1,2]] 
    print  ('对列使用高级索引来切片：')  
    print (y)

    #===========================================================================
    # 布尔索引
    # 当结果对象是布尔运算（例如比较运算符）的结果时，将使用此类型的高级索引。
    #===========================================================================

    # 现在我们会打印出大于 5 的元素  
    print ('大于 5 的元素是：')  
    print (x[x > 5])
    
    # 使用了~（取补运算符）来过滤NaN
    a = np.array([np.nan,1,2,np.nan,3,4,5])  
    print (a[~np.isnan(a)])

    # 从数组中过滤掉非复数元素。
    a = np.array([1,  2+6j,  5,  3.5+5j])  
    print (a[np.iscomplex(a)])

    #===========================================================================
    # NumPy - 广播
    # 如果两个数组的维数不相同，则元素到元素的操作是不可能的。 然而，在 NumPy 中仍然可以对形状不相似的数组进行操作，因为它拥有广播功能。 较小的数组会广播到较大数组的大小，以便使它们的形状可兼容
    #===========================================================================
    a = np.array([1,2,3,4]) 
    b = np.array([10,20,30,40]) 
    c = a * b 
    print (c)
    
    a = np.array([[0.0,0.0,0.0],[10.0,10.0,10.0],[20.0,20.0,20.0],[30.0,30.0,30.0]]) 
    b = np.array([1.0,2.0,3.0])  
    print ('第一个数组加第二个数组：')  
    print (a + b)
    

